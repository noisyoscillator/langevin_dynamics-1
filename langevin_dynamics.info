This is langevin_dynamics.info, produced by makeinfo version 4.8 from
langevin_dynamics.texi.

Generated by Sphinx 1.4.6.
INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* langevin_dynamics: (langevin_dynamics.info). One line description of project.
END-INFO-DIR-ENTRY

     langevin_dynamics 0.1.0, Sep 28, 2016

     xinyang li

     Copyright (C) 2016, xinyang li


File: langevin_dynamics.info,  Node: Top,  Next: langevin_dynamics,  Up: (dir)

langevin_dynamics Documentation
*******************************

     langevin_dynamics 0.1.0, Sep 28, 2016

     xinyang li

     Copyright (C) 2016, xinyang li

Contents:

* Menu:

* langevin_dynamics::
* Installation::
* Usage::
* Contributing::
* Indices and tables::

 --- The Detailed Node Listing ---

langevin_dynamics

* Features::
* Note::
* TODO::
* Credits::

Installation

* Stable release::
* From sources::

Contributing

* Types of Contributions::
* Get Started!::
* Pull Request Guidelines::
* Tips::

Types of Contributions

* Report Bugs::
* Fix Bugs::
* Implement Features::
* Write Documentation::
* Submit Feedback::


File: langevin_dynamics.info,  Node: langevin_dynamics,  Next: Installation,  Prev: Top,  Up: Top

1 langevin_dynamics
*******************

In statistical physics, a Langevin equation (Paul Langevin, 1908) is a
stochastic differential equation describing the time evolution of a
subset of the degrees of freedom.

Python Boilerplate contains all the boilerplate you need to create a
Python package.

   * Free software: MIT license

   * Documentation: <https://langevin-dynamics.readthedocs.io>.

* Menu:

* Features::
* Note::
* TODO::
* Credits::


File: langevin_dynamics.info,  Node: Features,  Next: Note,  Up: langevin_dynamics

1.1 Features
============

   * A simple python program for Lagevin equation simulation.

   * Required input values are read from a file named input and output
     file is called trajectory.txt.

   * Potential is based on simply y = c[b-a(x-d)^2]^2, which is a good
     example of typical double well potential in chemistry. You can
     change a,b and c and the range in gen_pot.py to get your own
     potential file. Parameter d is used to shift the origin of
     simulation box to zero.

   * Periodic boundary conditions enabled.


File: langevin_dynamics.info,  Node: Note,  Next: TODO,  Prev: Features,  Up: langevin_dynamics

1.2 Note
========

   * Please modify input under langevin_dynamcis folder before running
     simulations


File: langevin_dynamics.info,  Node: TODO,  Next: Credits,  Prev: Note,  Up: langevin_dynamics

1.3 TODO
========

   * Adding a module to convert tracjectories into animation.

   * Integration of main code and potential generating code.


File: langevin_dynamics.info,  Node: Credits,  Prev: TODO,  Up: langevin_dynamics

1.4 Credits
===========

This package was created with Cookiecutter(1) and the
audreyr/cookiecutter-pypackage(2) project template.

This folder contains simply the documentations for lagevin dynamics
code.

---------- Footnotes ----------

(1) https://github.com/audreyr/cookiecutter

(2) https://github.com/audreyr/cookiecutter-pypackage


File: langevin_dynamics.info,  Node: Installation,  Next: Usage,  Prev: langevin_dynamics,  Up: Top

2 Installation
**************

* Menu:

* Stable release::
* From sources::


File: langevin_dynamics.info,  Node: Stable release,  Next: From sources,  Up: Installation

2.1 Stable release
==================

To install langevin_dynamics, run this command in your terminal:

    $ pip install langevin_dynamics

This is the preferred method to install langevin_dynamics, as it will
always install the most recent stable release.

If you don't have pip(1) installed, this Python installation guide(2)
can guide you through the process.

---------- Footnotes ----------

(1) https://pip.pypa.io

(2) http://docs.python-guide.org/en/latest/starting/installation/


File: langevin_dynamics.info,  Node: From sources,  Prev: Stable release,  Up: Installation

2.2 From sources
================

The sources for langevin_dynamics can be downloaded from the Github
repo(1).

You can either clone the public repository:

    $ git clone git://github.com/tautomer/langevin_dynamics

Or download the tarball(2):

    $ curl  -OL https://github.com/tautomer/langevin_dynamics/tarball/master

Once you have a copy of the source, you can install it with:

    $ python setup.py install

---------- Footnotes ----------

(1) https://github.com/tautomer/langevin_dynamics

(2) https://github.com/tautomer/langevin_dynamics/tarball/master


File: langevin_dynamics.info,  Node: Usage,  Next: Contributing,  Prev: Installation,  Up: Top

3 Usage
*******

To use langevin_dynamics in a project:

    import langevin_dynamics


File: langevin_dynamics.info,  Node: Contributing,  Next: Indices and tables,  Prev: Usage,  Up: Top

4 Contributing
**************

Contributions are welcome, and they are greatly appreciated! Every
little bit helps, and credit will always be given.

You can contribute in many ways:

* Menu:

* Types of Contributions::
* Get Started!::
* Pull Request Guidelines::
* Tips::


File: langevin_dynamics.info,  Node: Types of Contributions,  Next: Get Started!,  Up: Contributing

4.1 Types of Contributions
==========================

* Menu:

* Report Bugs::
* Fix Bugs::
* Implement Features::
* Write Documentation::
* Submit Feedback::


File: langevin_dynamics.info,  Node: Report Bugs,  Next: Fix Bugs,  Up: Types of Contributions

4.1.1 Report Bugs
-----------------

Report bugs at <https://github.com/tautomer/langevin_dynamics/issues>.

If you are reporting a bug, please include:

   * Your operating system name and version.

   * Any details about your local setup that might be helpful in
     troubleshooting.

   * Detailed steps to reproduce the bug.


File: langevin_dynamics.info,  Node: Fix Bugs,  Next: Implement Features,  Prev: Report Bugs,  Up: Types of Contributions

4.1.2 Fix Bugs
--------------

Look through the GitHub issues for bugs. Anything tagged with "bug" and
"help wanted" is open to whoever wants to implement it.


File: langevin_dynamics.info,  Node: Implement Features,  Next: Write Documentation,  Prev: Fix Bugs,  Up: Types of Contributions

4.1.3 Implement Features
------------------------

Look through the GitHub issues for features. Anything tagged with
"enhancement" and "help wanted" is open to whoever wants to implement
it.


File: langevin_dynamics.info,  Node: Write Documentation,  Next: Submit Feedback,  Prev: Implement Features,  Up: Types of Contributions

4.1.4 Write Documentation
-------------------------

langevin_dynamics could always use more documentation, whether as part
of the official langevin_dynamics docs, in docstrings, or even on the
web in blog posts, articles, and such.


File: langevin_dynamics.info,  Node: Submit Feedback,  Prev: Write Documentation,  Up: Types of Contributions

4.1.5 Submit Feedback
---------------------

The best way to send feedback is to file an issue at
<https://github.com/tautomer/langevin_dynamics/issues>.

If you are proposing a feature:

   * Explain in detail how it would work.

   * Keep the scope as narrow as possible, to make it easier to
     implement.

   * Remember that this is a volunteer-driven project, and that
     contributions are welcome :)


File: langevin_dynamics.info,  Node: Get Started!,  Next: Pull Request Guidelines,  Prev: Types of Contributions,  Up: Contributing

4.2 Get Started!
================

Ready to contribute? Here's how to set up `langevin_dynamics' for local
development.

  1. Fork the `langevin_dynamics' repo on GitHub.

  2. Clone your fork locally:

         $ git clone git@github.com:your_name_here/langevin_dynamics.git

  3. Install your local copy into a virtualenv. Assuming you have
     virtualenvwrapper installed, this is how you set up your fork for
     local development:

         $ mkvirtualenv langevin_dynamics
         $ cd langevin_dynamics/
         $ python setup.py develop

  4. Create a branch for local development:

         $ git checkout -b name-of-your-bugfix-or-feature

     Now you can make your changes locally.

  5. When you're done making changes, check that your changes pass
     flake8 and the tests, including testing other Python versions with
     tox:

         $ flake8 langevin_dynamics tests
         $ python setup.py test or py.test
         $ tox

     To get flake8 and tox, just pip install them into your virtualenv.

  6. Commit your changes and push your branch to GitHub:

         $ git add .
         $ git commit -m "Your detailed description of your changes."
         $ git push origin name-of-your-bugfix-or-feature

  7. Submit a pull request through the GitHub website.


File: langevin_dynamics.info,  Node: Pull Request Guidelines,  Next: Tips,  Prev: Get Started!,  Up: Contributing

4.3 Pull Request Guidelines
===========================

Before you submit a pull request, check that it meets these guidelines:

  1. The pull request should include tests.

  2. If the pull request adds functionality, the docs should be
     updated. Put your new functionality into a function with a
     docstring, and add the feature to the list in README.rst.

  3. The pull request should work for Python 2.6, 2.7, 3.3, 3.4 and
     3.5, and for PyPy. Check
     <https://travis-ci.org/tautomer/langevin_dynamics/pull_requests>
     and make sure that the tests pass for all supported Python
     versions.


File: langevin_dynamics.info,  Node: Tips,  Prev: Pull Request Guidelines,  Up: Contributing

4.4 Tips
========

To run a subset of tests:

    $ python -m unittest tests.test_langevin_dynamics


File: langevin_dynamics.info,  Node: Indices and tables,  Prev: Contributing,  Up: Top

Indices and tables
******************

   * genindex

   * modindex

   * search



Tag Table:
Node: Top372
Ref: index doc617
Ref: 0617
Node: langevin_dynamics1094
Ref: readme doc1195
Ref: 11195
Ref: readme welcome-to-langevin-dynamics-s-documentation1195
Ref: 21195
Ref: readme langevin-dynamics1195
Ref: 31195
Node: Features1647
Ref: readme features1733
Ref: 41733
Node: Note2274
Ref: readme note2373
Ref: 52373
Node: TODO2481
Ref: readme todo2579
Ref: 62579
Node: Credits2723
Ref: readme credits2808
Ref: 72808
Ref: Credits-Footnote-13048
Ref: Credits-Footnote-23093
Node: Installation3148
Ref: installation doc3251
Ref: 83251
Ref: installation installation3251
Ref: 93251
Node: Stable release3328
Ref: installation stable-release3423
Ref: a3423
Ref: Stable release-Footnote-13822
Ref: Stable release-Footnote-23847
Node: From sources3914
Ref: installation from-sources4009
Ref: b4009
Ref: installation python-installation-guide4009
Ref: c4009
Ref: From sources-Footnote-14461
Ref: From sources-Footnote-24512
Node: Usage4578
Ref: usage doc4676
Ref: d4676
Ref: usage tarball4676
Ref: e4676
Ref: usage usage4676
Ref: f4676
Node: Contributing4763
Ref: contributing contributing4867
Ref: 104867
Ref: contributing doc4867
Ref: 114867
Node: Types of Contributions5142
Ref: contributing types-of-contributions5245
Ref: 125245
Node: Report Bugs5406
Ref: contributing report-bugs5504
Ref: 135504
Node: Fix Bugs5835
Ref: contributing fix-bugs5960
Ref: 145960
Node: Implement Features6120
Ref: contributing implement-features6253
Ref: 156253
Node: Write Documentation6445
Ref: contributing write-documentation6585
Ref: 166585
Node: Submit Feedback6819
Ref: contributing submit-feedback6932
Ref: 176932
Node: Get Started!7343
Ref: contributing get-started7478
Ref: 187478
Node: Pull Request Guidelines8765
Ref: contributing pull-request-guidelines8882
Ref: 198882
Node: Tips9497
Ref: contributing tips9593
Ref: 1a9593
Node: Indices and tables9694
Ref: index indices-and-tables9784
Ref: 1b9784

End Tag Table
